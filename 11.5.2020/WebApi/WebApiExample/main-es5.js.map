{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/employees-component/employees.component.ts","webpack:///src/app/employees-component/employees.component.html","webpack:///src/app/employees.service.ts","webpack:///src/app/home-component/home.component.ts","webpack:///src/app/home-component/home.component.html","webpack:///src/app/number-to-words.pipe.ts","webpack:///src/app/registration-component/registration.component.ts","webpack:///src/app/registration-component/registration.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","useHash","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","EmployeesComponent","empService","employees","newForm","EmpId","required","min","EmpName","pattern","Email","email","getEmployees","subscribe","response","console","log","error","get","untouched","valid","value","reset","onAddClick","EmployeesService","httpClient","apiPrefix","HomeComponent","NumberToWordsPipe","w","digits","str","toString","split","i","length","Number","name","RegistrationComponent","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home-component/home.component';\nimport { EmployeesComponent } from './employees-component/employees.component';\nimport { RegistrationComponent } from './registration-component/registration.component';\n\nconst routes: Routes = [\n  { path: \"home\", component: HomeComponent },\n  { path: \"employees\", component: EmployeesComponent },\n  { path: \"registration\", component: RegistrationComponent },\n  { path: \"\", redirectTo: \"/home\", pathMatch: \"full\" },\n  { path: \"**\", redirectTo: \"/home\" },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent\n{\n  \n}\n\n\n\n\n\n\n","<div>\n  <a [routerLink]=\" [ '/home' ] \">Home</a> |&nbsp;\n  <a [routerLink]=\" [ '/employees' ] \">Employees</a> |&nbsp;\n  <a [routerLink]=\" [ '/registration' ] \">Registration</a> |&nbsp;\n</div>\n\n<div class=\"container-fluid\">\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { EmployeesService } from \"./employees.service\";\nimport { NumberToWordsPipe } from './number-to-words.pipe';\nimport { HomeComponent } from './home-component/home.component';\nimport { RegistrationComponent } from './registration-component/registration.component';\nimport { EmployeesComponent } from './employees-component/employees.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NumberToWordsPipe,\n    HomeComponent,\n    RegistrationComponent,\n    EmployeesComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [ EmployeesService ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n","import { Component } from '@angular/core';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeesService } from '../employees.service';\r\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'employees-comp',\r\n  templateUrl: \"employees.component.html\",\r\n  styleUrls: [ \"employees.component.css\" ]\r\n})\r\nexport class EmployeesComponent\r\n{\r\n  //properties\r\n  employees: Employee[];\r\n\r\n  //create property for reactive form\r\n  newForm: FormGroup;\r\n\r\n  //constructor\r\n  constructor(private empService: EmployeesService)\r\n  {\r\n    this.employees = [];\r\n\r\n    //create reactive form\r\n    this.newForm = new FormGroup({\r\n      EmpId: new FormControl(null, [Validators.required, Validators.min(100) ]),\r\n      EmpName: new FormControl(null, [Validators.required, Validators.pattern('^[A-Za-z .]*$')]),\r\n      Email: new FormControl(null, [Validators.email]),\r\n    });\r\n  }\r\n\r\n  //ngOnInit\r\n  ngOnInit()\r\n  {\r\n    this.empService.getEmployees().subscribe(\r\n\r\n      (response: Employee[]) => {\r\n        console.log(response);\r\n        this.employees = response;\r\n      }, //success\r\n\r\n      (error) => {\r\n        console.log(error);\r\n      } //failure\r\n    );\r\n  }\r\n\r\n  //methods\r\n  onAddClick()\r\n  {\r\n    console.log(this.newForm.get(\"EmpId\").untouched );\r\n\r\n    if (this.newForm.valid == true)\r\n    {\r\n      //accessing value of any form control (textbox etc.)\r\n      console.log(this.newForm.value.EmpId);\r\n\r\n      //create emp object from the value of form\r\n      //var emp = new Employee(this.newForm.value.EmpId, this.newForm.value.EmpName, this.newForm.value.Email);\r\n\r\n      //add object to array\r\n      //this.employees.push(emp);\r\n\r\n      //clear textboxes\r\n      this.newForm.reset();\r\n    }\r\n    else\r\n    {\r\n      console.log(\"Invalid data\");\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n","<div class=\"row\">\r\n\r\n  <!-- left box starts -->\r\n  <div class=\"col-lg-6\">\r\n    <h4 class=\"mb-3\">Employees</h4>\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr class=\"table-dark text-dark\">\r\n          <th>Emp ID</th>\r\n          <th>Emp Name</th>\r\n          <th>Dept No</th>\r\n          <th>Salary</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        <tr *ngFor=\"let emp of employees\">\r\n          <td>{{emp.EmpID}}</td>\r\n          <td>{{emp.EmpName}}</td>\r\n          <td>{{emp.DeptNo}}</td>\r\n          <td>{{emp.Salary}}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <!-- left box ends -->\r\n\r\n\r\n  <!-- right box starts -->\r\n  <div class=\"col-lg-6\">\r\n    <form [formGroup]=\"newForm\">\r\n\r\n      <h5 class=\"border-bottom pb-2 mb-2\">New Employee</h5>\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"empId\" class=\"col-md-3 col-form-label\">Employee ID:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Employee ID\" name=\"empId\" formControlName=\"EmpId\" [ngClass]=\"{\r\n            'is-valid': newForm.get('EmpId').valid && newForm.get('EmpId').touched,\r\n            'is-invalid': newForm.get('EmpId').invalid && newForm.get('EmpId').touched\r\n          }\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpId').invalid && newForm.get('EmpId').touched && newForm.get('EmpId').errors.required\">Employee ID can't be blank</span>\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpId').invalid && newForm.get('EmpId').touched && newForm.get('EmpId').errors.min\">Employee ID should be greater than or equal to 100</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <!-- is-valid    : green\r\n      is-invalid : red -->\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"empName\" class=\"col-md-3 col-form-label\">Employee Name:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Employee Name\" name=\"empName\" formControlName=\"EmpName\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpName').invalid && newForm.get('EmpName').touched && newForm.get('EmpName').errors.required\">Employee Name can't be blank</span>\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpName').invalid && newForm.get('EmpName').touched && newForm.get('EmpName').errors.pattern\">Employee Name can contain alphabets, dot (.) and space</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"email\" class=\"col-md-3 col-form-label\">Email:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Email\" name=\"email\" formControlName=\"Email\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('Email').invalid && newForm.get('Email').touched && newForm.get('Email').errors.email\">Email should be in correct format</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"text-center\">\r\n        <button class=\"btn btn-success\" (click)=\"onAddClick()\">Add</button>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n  <!-- right box ends -->\r\n\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Employee } from './Employee';\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\n@Injectable( )\r\nexport class EmployeesService\r\n{\r\n  constructor(private httpClient: HttpClient)\r\n  {\r\n  }\r\n\r\n  apiPrefix: string = \"http://localhost:55818\";\r\n\r\n  getEmployees()\r\n  {\r\n    return this.httpClient.get<Employee[]>(this.apiPrefix + \"/api/employees\");\r\n  }\r\n}\r\n\r\n\r\n\r\n//200 = OK\r\n//400 = Bad Request\r\n//404 = Not Found\r\n//500 = Internal Server Error (exception at server side)\r\n","import { Component } from '@angular/core';\r\nimport { EmployeesService } from '../employees.service';\r\n\r\n@Component({\r\n  selector: 'home-comp',\r\n  templateUrl: \"home.component.html\",\r\n  styleUrls: [ \"home.component.css\" ]\r\n})\r\nexport class HomeComponent\r\n{\r\n}\r\n\r\n\r\n","<div>Home</div>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: \"words\"\r\n})\r\nexport class NumberToWordsPipe implements PipeTransform\r\n{\r\n  transform(value: number)\r\n  {\r\n    let w = [ \"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" ];\r\n    let digits = [];\r\n    let str = \"\";\r\n\r\n    digits = value.toString().split(\"\");\r\n    //console.log(digits);\r\n     \r\n    for (let i = 0; i < digits.length; i++)\r\n    {\r\n      str = str + w[ Number(digits[i]) ] + \" \";\r\n    }\r\n    return str;\r\n  }\r\n}\r\n\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'registration-comp',\r\n  templateUrl: \"registration.component.html\",\r\n  styleUrls: [ \"registration.component.css\" ]\r\n})\r\nexport class RegistrationComponent\r\n{\r\n  constructor()\r\n  {\r\n  }\r\n\r\n  ngOnInit()\r\n  {\r\n  }\r\n}\r\n\r\n\r\n","<div>Registration</div>\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}