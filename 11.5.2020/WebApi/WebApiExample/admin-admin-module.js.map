{"version":3,"sources":["./src/app/Employee.ts","./src/app/admin/admin.module.ts","./src/app/admin/admin.routing.ts","./src/app/employee-component/employee.component.ts","./src/app/employee-component/employee.component.html","./src/app/employees-component/employees.component.ts","./src/app/employees-component/employees.component.html","./src/app/number-to-words.pipe.ts"],"names":[],"mappings":"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","file":"admin-admin-module.js","sourcesContent":["export class Employee\r\n{\r\n  EmpID: number;\r\n  EmpName: string;\r\n  DeptNo: number;\r\n  Salary: number;\r\n\r\n  constructor(empId: number, empName: string, deptNo: number, salary: number)\r\n  {\r\n    this.EmpID = empId;\r\n    this.EmpName = empName;\r\n    this.DeptNo = deptNo;\r\n    this.Salary = salary;\r\n  }\r\n}\r\n\r\n\r\n","import { NgModule } from \"@angular/core\";\r\nimport { NumberToWordsPipe } from '../number-to-words.pipe';\r\nimport { EmployeesComponent } from '../employees-component/employees.component';\r\nimport { EmployeeComponent } from '../employee-component/employee.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdminRoutingModule } from './admin.routing';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NumberToWordsPipe,\r\n    EmployeesComponent,\r\n    EmployeeComponent\r\n  ],\r\n  exports: [\r\n    NumberToWordsPipe,\r\n    EmployeesComponent,\r\n    EmployeeComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AdminRoutingModule\r\n  ]\r\n})\r\nexport class AdminModule\r\n{\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EmployeesComponent } from '../employees-component/employees.component';\r\nimport { EmployeeComponent } from '../employee-component/employee.component';\r\n\r\nconst routes: Routes = [\r\n  { path: \"employees\", component: EmployeesComponent },\r\n  { path: \"employee/:EmpID\", component: EmployeeComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AdminRoutingModule { }\r\n\r\n","import { Component } from \"@angular/core\";\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { EmployeesService } from '../employees.service';\r\nimport { Employee } from '../Employee';\r\n\r\n@Component({\r\n  selector: \"app-employee\",\r\n  templateUrl: \"./employee.component.html\",\r\n  styleUrls: [ \"./employee.component.css\" ]\r\n})\r\nexport class EmployeeComponent\r\n{\r\n  currentEmpID: number;\r\n  currentEmployee: Employee;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute, private employeesService: EmployeesService)\r\n  {\r\n    this.currentEmpID = 0;\r\n    this.currentEmployee = new Employee(null, null, null, null);\r\n  }\r\n\r\n  ngOnInit()\r\n  {\r\n    //receiving router parameter\r\n    this.activatedRoute.params.subscribe((params) => {\r\n      this.currentEmpID = params[\"EmpID\"];\r\n\r\n      //call http request to     /api/employees/1\r\n      this.employeesService.getEmployeeByEmpID(this.currentEmpID).subscribe(\r\n\r\n        (response: Employee) => {\r\n          this.currentEmployee = response;\r\n        }, //success\r\n\r\n        (error) => {\r\n          console.log(error);\r\n        }, //failure\r\n      );\r\n\r\n    });\r\n  }\r\n}\r\n\r\n","<h3>Employee</h3>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-6 mx-auto\">\r\n    \r\n    <!-- EmpID starts -->\r\n    <div class=\"form-row form-group\">\r\n      <label for=\"EmpID\" class=\"col-form-label col-3\">Emp ID</label>\r\n      <div class=\"col-9\">\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"Emp ID\" name=\"EmpID\" [(ngModel)]=\"currentEmployee.EmpID\">\r\n      </div>\r\n    </div>\r\n    <!-- EmpID ends -->\r\n\r\n\r\n    <!-- EmpName starts -->\r\n    <div class=\"form-row form-group\">\r\n      <label for=\"EmpName\" class=\"col-form-label col-3\">Emp Name</label>\r\n      <div class=\"col-9\">\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"Employee Name\" name=\"EmpName\" [(ngModel)]=\"currentEmployee.EmpName\">\r\n      </div>\r\n    </div>\r\n    <!-- EmpName ends -->\r\n\r\n\r\n\r\n    <!-- DeptNo starts -->\r\n    <div class=\"form-row form-group\">\r\n      <label for=\"DeptNo\" class=\"col-form-label col-3\">Dept No</label>\r\n      <div class=\"col-9\">\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"Dept No\" name=\"DeptNo\" [(ngModel)]=\"currentEmployee.DeptNo\">\r\n      </div>\r\n    </div>\r\n    <!-- DeptNo ends -->\r\n\r\n\r\n    <!-- Salary starts -->\r\n    <div class=\"form-row form-group\">\r\n      <label for=\"Salary\" class=\"col-form-label col-3\">Salary</label>\r\n      <div class=\"col-9\">\r\n        <input type=\"text\" class=\"form-control\" placeholder=\"Salary\" name=\"Salary\" [(ngModel)]=\"currentEmployee.Salary\">\r\n      </div>\r\n    </div>\r\n    <!-- Salary ends -->\r\n\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-12 mt-3 text-right\">\r\n        <a [routerLink]=\" [ '/admin', 'employees' ] \">Back to Employees</a>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n","import { Component } from '@angular/core';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeesService } from '../employees.service';\r\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'employees-comp',\r\n  templateUrl: \"employees.component.html\",\r\n  styleUrls: [ \"employees.component.css\" ]\r\n})\r\nexport class EmployeesComponent\r\n{\r\n  //properties\r\n  employees: Employee[];\r\n  loaded: boolean = false;\r\n\r\n  //create property for reactive form\r\n  newForm: FormGroup;\r\n\r\n  //constructor\r\n  constructor(public empService: EmployeesService, private router: Router)\r\n  {\r\n    this.employees = [];\r\n\r\n    //create reactive form\r\n    this.newForm = new FormGroup({\r\n      EmpID: new FormControl(null, [Validators.required, Validators.pattern('^[0-9]*$') ]),\r\n      EmpName: new FormControl(null, [Validators.required, Validators.pattern('^[A-Za-z .]*$')]),\r\n      DeptNo: new FormControl(null, [ Validators.pattern('^[0-9]*$') ]),\r\n      Salary: new FormControl(null, [ Validators.pattern('^[0-9]*$') ]),\r\n    });\r\n  }\r\n\r\n  //ngOnInit\r\n  ngOnInit()\r\n  {\r\n    this.empService.getEmployees().subscribe(\r\n\r\n      (response: Employee[]) => {\r\n        console.log(response);\r\n\r\n        //sort based on EmpName\r\n        /*response = response.sort(\r\n          (a, b) => (a.EmpName > b.EmpName) ? 1 : (a.EmpName === b.EmpName) ? ((a.EmpName > b.EmpName) ? 1 : -1) : -1 );*/\r\n\r\n\r\n        this.employees = response;\r\n        this.loaded = true;\r\n      }, //success\r\n\r\n      (error) => {\r\n        console.log(error);\r\n        //this.message = \"Unable to load data\";\r\n      } //failure\r\n    );\r\n  }\r\n\r\n\r\n  //methods\r\n  onAddClick()\r\n  {\r\n    //console.log(this.newForm.get(\"EmpId\").untouched );\r\n\r\n    if (this.newForm.valid == true)\r\n    {\r\n\r\n      //navigate to other route\r\n      //this.router.navigate( [ '/path' ] );\r\n\r\n      //accessing value of any form control (textbox etc.)\r\n      console.log(this.newForm.value.EmpId);\r\n\r\n      //create emp object from the value of form\r\n      var emp = new Employee(this.newForm.value.EmpID, this.newForm.value.EmpName, this.newForm.value.DeptNo, this.newForm.value.Salary);\r\n\r\n      //call service\r\n      this.empService.postEmployee(emp).subscribe(\r\n        (response) => {\r\n          console.log(response);\r\n\r\n          //add object to array\r\n          this.employees.push(emp);\r\n        }, //success\r\n\r\n        (error) => {\r\n          console.log(error);\r\n\r\n        } //error\r\n      );\r\n\r\n      \r\n\r\n      //clear textboxes\r\n      this.newForm.reset();\r\n    }\r\n    else\r\n    {\r\n      console.log(\"Invalid data\");\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n","<div class=\"row\">\r\n\r\n  <!-- left box starts -->\r\n  <div class=\"col-lg-6\">\r\n    <h4 class=\"mb-3\">Employees <i class=\"fa fa-spinner fa-spin\" *ngIf=\"loaded == false\"></i> </h4>\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr class=\"table-dark text-dark\">\r\n          <th>Emp ID</th>\r\n          <th>Emp Name</th>\r\n          <th>Dept No</th>\r\n          <th>Salary</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        <tr *ngFor=\"let emp of employees\">\r\n          <td>{{emp.EmpID}}</td>\r\n          <td>{{emp.EmpName}}</td>\r\n          <td>{{emp.DeptNo}}</td>\r\n          <td>{{emp.Salary}}</td>\r\n          <td>\r\n            <a [routerLink]=\" [ '/admin', 'employee', emp.EmpID] \">Details</a>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <!-- left box ends -->\r\n\r\n\r\n  <!-- right box starts -->\r\n  <div class=\"col-lg-6\">\r\n    <form [formGroup]=\"newForm\">\r\n\r\n      <h5 class=\"border-bottom pb-2 mb-2\">New Employee</h5>\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"EmpID\" class=\"col-md-3 col-form-label\">Employee ID:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Employee ID\" name=\"EmpID\" formControlName=\"EmpID\" [ngClass]=\"{\r\n            'is-valid': newForm.get('EmpID').valid && newForm.get('EmpID').touched,\r\n            'is-invalid': newForm.get('EmpID').invalid && newForm.get('EmpID').touched\r\n          }\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpID').invalid && newForm.get('EmpID').touched && newForm.get('EmpID').errors.required\">Employee ID can't be blank</span>\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpID').invalid && newForm.get('EmpID').touched && newForm.get('EmpID').errors.pattern\">Employee ID should be number only.</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <!-- is-valid    : green\r\n      is-invalid : red -->\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"empName\" class=\"col-md-3 col-form-label\">Employee Name:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Employee Name\" name=\"empName\" formControlName=\"EmpName\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpName').invalid && newForm.get('EmpName').touched && newForm.get('EmpName').errors.required\">Employee Name can't be blank</span>\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('EmpName').invalid && newForm.get('EmpName').touched && newForm.get('EmpName').errors.pattern\">Employee Name can contain alphabets, dot (.) and space</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"DeptNo\" class=\"col-md-3 col-form-label\">Dept No:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Dept No\" name=\"DeptNo\" formControlName=\"DeptNo\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('DeptNo').invalid && newForm.get('DeptNo').touched && newForm.get('DeptNo').errors.pattern\">Dept No should be only numbers.</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n      <div class=\"form-group form-row\">\r\n        <label for=\"Salary\" class=\"col-md-3 col-form-label\">Salary:</label>\r\n        <div class=\"col-md-9\">\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"Salary\" name=\"Salary\" formControlName=\"Salary\">\r\n\r\n          <span class=\"text-danger\" *ngIf=\"newForm.get('Salary').invalid && newForm.get('Salary').touched && newForm.get('Salary').errors.pattern\">Salary should be only numbers.</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"text-center\">\r\n        <button class=\"btn btn-success\" (click)=\"onAddClick()\">Add</button>\r\n      </div>\r\n\r\n    </form>\r\n\r\n  </div>\r\n  <!-- right box ends -->\r\n\r\n</div>\r\n\r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: \"words\"\r\n})\r\nexport class NumberToWordsPipe implements PipeTransform\r\n{\r\n  transform(value: number)\r\n  {\r\n    let w = [ \"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" ];\r\n    let digits = [];\r\n    let str = \"\";\r\n\r\n    digits = value.toString().split(\"\");\r\n    //console.log(digits);\r\n     \r\n    for (let i = 0; i < digits.length; i++)\r\n    {\r\n      str = str + w[ Number(digits[i]) ] + \" \";\r\n    }\r\n    return str;\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"webpack:///"}